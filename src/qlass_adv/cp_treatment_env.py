import random

class CPTreatmentEnv:
    def __init__(self):
        # A simple knowledge graph mapping cerebral palsy subtypes to key treatment keywords.
        self.knowledge_graph = {
            "spastic": {"physical", "therapy", "botulinum", "toxin", "surgery", "medication"},
            "dyskinetic": {"medical", "management", "physical", "therapy", "assistive", "devices"},
            "ataxic": {"balance", "training", "occupational", "therapy", "coordination"}
        }
        # Dummy patient profiles with details relevant to treatment decisions.
        self.patient_profiles = [
            {
                "id": 1,
                "age": 5,
                "type": "spastic",
                "symptoms": "muscle stiffness and difficulty walking"
            },
            {
                "id": 2,
                "age": 8,
                "type": "dyskinetic",
                "symptoms": "involuntary movements and poor coordination"
            },
            {
                "id": 3,
                "age": 12,
                "type": "ataxic",
                "symptoms": "balance issues and unsteady gait"
            }
        ]
        self.current_patient = None

    def reset(self):
        """
        Reset the environment by randomly selecting a patient profile and constructing a state description.
        Returns:
            state (str): A description containing patient details and the question prompt.
        """
        self.current_patient = random.choice(self.patient_profiles)
        state = (
            f"Patient ID: {self.current_patient['id']}, Age: {self.current_patient['age']}, "
            f"Type: {self.current_patient['type']}, Symptoms: {self.current_patient['symptoms']}. "
            "Question: What is the best treatment plan for this patient?"
        )
        return state

    def step(self, action):
        """
        Evaluate the proposed treatment plan (action) provided as a text string.
        The reward is computed as the ratio of recommended treatment keywords mentioned in the action.
        
        Args:
            action (str): The treatment plan generated by the LLM.
            
        Returns:
            next_state: None (single-step episode).
            reward (float): A score between 0 and 1 based on keyword matches.
            done (bool): Always True (episode terminates after one step).
            info (dict): Additional information (e.g., matched keywords).
        """
        subtype = self.current_patient["type"]
        key_terms = self.knowledge_graph.get(subtype, set())
        # Convert the action to lowercase words (naively split on whitespace)
        action_words = set(action.lower().split())
        matches = key_terms.intersection(action_words)
        # Reward is the fraction of key treatment terms mentioned.
        reward = len(matches) / len(key_terms) if key_terms else 0.0
        
        next_state = None  # Single-step environment
        done = True
        info = {"matches": matches}
        return next_state, reward, done, info

# Example usage:
if __name__ == "__main__":
    env = CPTreatmentEnv()
    state = env.reset()
    print("State:", state)
    
    # Example action from the LLM: in real use, this text would be generated by your LLM.
    example_action = "I recommend physical therapy and botulinum toxin injections along with medication."
    next_state, reward, done, info = env.step(example_action)
    
    print("\nAction (Treatment Plan):", example_action)
    print("Reward:", reward)
    print("Info:", info)
